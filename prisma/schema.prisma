// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  clerkId                 String    @unique
  email                   String    @unique
  firstName               String?
  lastName                String?
  imageUrl                String?
  stripeCustomerId        String?
  stripeSubscriptionId    String?   @unique
  stripePriceId           String?
  stripeCurrentPeriodEnd  DateTime?
  credits                 Int       @default(10)
  isAdmin                 Boolean   @default(false)
  hasUnlimitedCredits     Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  generations Generation[]
  purchases   Purchase[]
  chats       Chat[]
  apiKeys     UserAPIKey[]

  @@map("users")
}

model Generation {
  id        String           @id @default(cuid())
  userId    String
  type      GenerationType
  prompt    String
  content   String?
  imageUrl  String?
  status    GenerationStatus @default(PROCESSING)
  model     String?
  tokens    Int?
  cost      Float?
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generations")
}

model Purchase {
  id              String        @id @default(cuid())
  userId          String
  stripeSessionId String        @unique
  amount          Float
  credits         Int
  status          PurchaseStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

enum GenerationType {
  TEXT
  IMAGE
  CODE
  WEBSITE
}

enum GenerationStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model AIProviderKey {
  id        String   @id @default(cuid())
  provider  String   @unique
  apiKey    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ai_provider_keys")
}

model Chat {
  id           String    @id @default(cuid())
  userId       String
  name         String
  provider     String
  model        String
  systemPrompt String?
  totalTokens  Int       @default(0)
  totalCost    Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chats")
}

model UserAPIKey {
  id        String   @id @default(cuid())
  userId    String
  provider  String   // 'openai', 'groq', 'google', 'cohere', 'huggingface', 'grok', 'deepseek'
  apiKey    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("user_api_keys")
}

model ChatMessage {
  id        String   @id @default(cuid())
  chatId    String
  role      String   // 'user', 'assistant', 'system'
  content   String
  tokens    Int?
  cost      Float?
  createdAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}