version: '3.8'

# Docker Compose конфигурация для разработки
# Использование: docker-compose -f docker-compose.dev.yml up

services:
  # PostgreSQL база данных для разработки
  db:
    image: postgres:15-alpine
    container_name: polniy-dev-db
    environment:
      - POSTGRES_DB=try1_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d try1_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - dev-network

  # Веб-интерфейс для управления базой данных
  adminer:
    image: adminer:latest
    container_name: polniy-dev-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - dev-network

  # Redis для кэширования и сессий
  redis:
    image: redis:7-alpine
    container_name: polniy-dev-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --requirepass devpassword
    restart: unless-stopped
    networks:
      - dev-network

  # Mailhog для тестирования email (опционально)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: polniy-dev-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    restart: unless-stopped
    networks:
      - dev-network

# Сети для разработки
networks:
  dev-network:
    driver: bridge
    name: polniy-dev-network

# Тома для разработки
volumes:
  postgres_dev_data:
    driver: local
    name: polniy-dev-postgres
  redis_dev_data:
    driver: local
    name: polniy-dev-redis